# Copyright 2018 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

CMAKE_MINIMUM_REQUIRED(VERSION 3.2 FATAL_ERROR)
PROJECT(sgx-rust-cpp-bridge CXX)

LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

SET (EXECUTABLE_OUTPUT_PATH "${CMAKE_BINARY_DIR}/bin")
SET (LIBRARY_OUTPUT_PATH "${CMAKE_BINARY_DIR}/lib")

SET(DEPS_DIR "${CMAKE_CURRENT_SOURCE_DIR}/deps")

SET(POET_ENCLAVE libpoet_enclave)
SET(RUST_SGX_BRIDGE rust_sgx_bridge)
SET(POET_COMMON common/c11_support)
SET(RUST_SGXFFI rust_sgxffi)
SET(TEST_POET_ENCLAVE testEnclave)

# COMPILER OPTIONS
# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

# ADDITIONAL LIBRARIES
# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

SET(SGX_EDGER "$ENV{SGX_SDK}/bin/x64/sgx_edger8r")
SET(SGX_SIGN "$ENV{SGX_SDK}/bin/x64/sgx_sign")

SET(SGX_INCLUDE "$ENV{SGX_SDK}/include")
SET(SGX_ENCLAVE_INCLUDE "$ENV{SGX_SDK}/include"
                        "$ENV{SGX_SDK}/include/tlibc"
                        "$ENV{SGX_SDK}/include/stlport")

# Add two sets of sgx untrusted lib varibles for both simulator and hardware
# mode in cache. These are being referred in sub-directories.
SET(SGX_LIBS_UNTRUSTED_SIM "" CACHE INTERNAL "SGX UNTURSTED LIBS FOR SIM MODE")
SET(SGX_LIBS_UNTRUSTED_HW "" CACHE INTERNAL "SGX UNTURSTED LIBS FOR HW MODE")

# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
FUNCTION(SGX_EDGE_TRUSTED EDL EDGE_FILES)
	GET_FILENAME_COMPONENT(EDL_BASE_NAME ${EDL} NAME_WE)
	INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
	
	SET (EDGE_FILES_LIST "${CMAKE_CURRENT_BINARY_DIR}/${EDL_BASE_NAME}_t.h" "${CMAKE_CURRENT_BINARY_DIR}/${EDL_BASE_NAME}_t.c") 
	SET (${EDGE_FILES} ${EDGE_FILES_LIST} PARENT_SCOPE) 
	ADD_CUSTOM_COMMAND( OUTPUT ${EDGE_FILES_LIST}
		COMMAND "${SGX_EDGER}" --trusted ${EDL} --search-path ${SGX_INCLUDE}
		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
		DEPENDS ${PROJECT_EDL} 
	)	
ENDFUNCTION()

FUNCTION(SGX_EDGE_UNTRUSTED EDL EDGE_FILES)
	GET_FILENAME_COMPONENT(EDL_BASE_NAME ${EDL} NAME_WE)
	INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
	
	SET (EDGE_FILES_LIST "${CMAKE_CURRENT_BINARY_DIR}/${EDL_BASE_NAME}_u.h" "${CMAKE_CURRENT_BINARY_DIR}/${EDL_BASE_NAME}_u.c") 
	SET (${EDGE_FILES} ${EDGE_FILES_LIST} PARENT_SCOPE) 
	ADD_CUSTOM_COMMAND( OUTPUT ${EDGE_FILES_LIST}
		COMMAND "${SGX_EDGER}" --untrusted ${EDL} --search-path ${SGX_INCLUDE}
		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
		DEPENDS ${PROJECT_EDL} 
	)	
ENDFUNCTION()

# MODE appends 'sim'/'hw' string to .so file to distinguish between simulator
# and hardware.
FUNCTION(SGX_SIGN_ENCLAVE TARGET MODE KEY_FILE CONFIG)
	SET (ENCLAVE $<TARGET_FILE:${TARGET}>)
	SET (SIGNED_ENCLAVE ${LIBRARY_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/${TARGET}${MODE}.signed${CMAKE_SHARED_LIBRARY_SUFFIX})
	SET (SIGNED_ENCLAVE ${SIGNED_ENCLAVE} PARENT_SCOPE)
	ADD_CUSTOM_COMMAND( TARGET ${TARGET}
		POST_BUILD
		COMMAND "${SGX_SIGN}" sign -key "${KEY_FILE}" -enclave "${ENCLAVE}" -out "${SIGNED_ENCLAVE}" -config "${CONFIG}"
	)	
ENDFUNCTION()

# IS_SIM_MODE flag identifies which libs are to be set in their coresponding 
# variables and gets updated in the cache.
FUNCTION(ADD_SGX_LIBS IS_SIM_MODE)

	SET(SGX_LIBS_TRUSTED_NAMES sgx_tstdc sgx_tstdcxx sgx_tkey_exchange sgx_tcrypto)
	SET(SGX_LIBS_UNTRUSTED_NAMES sgx_ukey_exchange)
        SET(SGX_LIBS_UNTRUSTED_NAMES ${SGX_LIBS_UNTRUSTED_NAMES} pthread )

        IF(${IS_SIM_MODE})
                SET(SGX_LIBS_TRUSTED_NAMES sgx_trts_sim sgx_tservice_sim ${SGX_LIBS_TRUSTED_NAMES})
                SET(SGX_LIBS_UNTRUSTED_NAMES sgx_urts_sim sgx_uae_service_sim ${SGX_LIBS_UNTRUSTED_NAMES})
        ELSE()
                SET(SGX_LIBS_TRUSTED_NAMES sgx_trts sgx_tservice ${SGX_LIBS_TRUSTED_NAMES})
                SET(SGX_LIBS_UNTRUSTED_NAMES sgx_urts sgx_uae_service ${SGX_LIBS_UNTRUSTED_NAMES})
        ENDIF()

        FOREACH(lib ${SGX_LIBS_TRUSTED_NAMES} ${SGX_LIBS_UNTRUSTED_NAMES})
                SET(${lib} ${lib})
        ENDFOREACH(lib)

        FOREACH(lib ${SGX_LIBS_TRUSTED_NAMES})
		SET(SGX_LIBS_TRUSTED ${SGX_LIBS_TRUSTED} ${${lib}})
        ENDFOREACH(lib)


        FOREACH(lib ${SGX_LIBS_UNTRUSTED_NAMES})
		IF(${IS_SIM_MODE})
			SET(SGX_LIBS_UNTRUSTED_SIM ${SGX_LIBS_UNTRUSTED_SIM} ${${lib}} CACHE INTERNAL "SGX UNTURSTED LIBS FOR SIM MODE")
		ELSE()
			SET(SGX_LIBS_UNTRUSTED_HW ${SGX_LIBS_UNTRUSTED_HW} ${${lib}} CACHE INTERNAL "SGX UNTURSTED LIBS FOR HW MODE")
		ENDIF()
        ENDFOREACH(lib)

ENDFUNCTION()
# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX


# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

MACRO( SET_RUNTIME type )
ENDMACRO()	

# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

INCLUDE_DIRECTORIES(${SGX_INCLUDE})
LINK_DIRECTORIES()

# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# PROJECTS
# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
ADD_SUBDIRECTORY (${POET_ENCLAVE})
ADD_SUBDIRECTORY (${RUST_SGX_BRIDGE})
ADD_SUBDIRECTORY (${POET_COMMON})
ADD_SUBDIRECTORY (${RUST_SGXFFI})
ADD_SUBDIRECTORY (${TEST_POET_ENCLAVE})

# Clears the variables from the Cache
UNSET(SGX_LIBS_UNTRUSTED_SIM CACHE)
UNSET(SGX_LIBS_UNTRUSTED_HW CACHE)
